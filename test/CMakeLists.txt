option(NOWIDE_RUN_WITH_WINE "Use wine to run tests" OFF)

function(nowide_add_test_ext name srcFile extraLibs defs)
  add_executable(${name} ${srcFile})
  target_link_libraries(${name} PRIVATE nowide::nowide ${extraLibs})
  target_compile_options(${name} PRIVATE ${warningFlags})
  target_compile_definitions(${name} PRIVATE ${defs})
  if(NOWIDE_RUN_WITH_WINE)
    add_test(NAME ${name} COMMAND wine $<TARGET_FILE:${name}>)
  else()
    add_test(NAME ${name} COMMAND ${name})
  endif()
endfunction()

function(nowide_add_test name)
  nowide_add_test_ext(${name} ${name}.cpp "" "")
endfunction()

nowide_add_test(test_codecvt)
nowide_add_test(test_convert)
nowide_add_test(test_env)
nowide_add_test(test_fstream)
nowide_add_test(test_iostream)
nowide_add_test(test_stdio)

nowide_add_test_ext(test_env_win test_env.cpp "" NOWIDE_TEST_INCLUDE_WINDOWS)
nowide_add_test_ext(test_system_n test_system.cpp "" NOWIDE_TEST_USE_NARROW=1)
if(WIN32)
  nowide_add_test_ext(test_system_w test_system.cpp "" NOWIDE_TEST_USE_NARROW=0)
else()
  nowide_add_test_ext(test_fstream_win_fstream test_fstream.cpp "" BOOST_NOWIDE_USE_WIN_FSTREAM=1)
endif()

if(NOT NOWIDE_STANDALONE)
  find_package(Boost 1.55 COMPONENTS filesystem system)
  if(Boost_FOUND)
    nowide_add_test_ext(test_fs test_fs.cpp Boost::filesystem "")
  endif()
endif()
